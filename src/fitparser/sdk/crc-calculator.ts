/////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2024 Garmin International, Inc.
// Licensed under the Flexible and Interoperable Data Transfer (FIT) Protocol License; you
// may not use this file except in compliance with the Flexible and Interoperable Data
// Transfer (FIT) Protocol License.
/////////////////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 21.158.0Release
// Tag = production/release/21.158.0-0-gc9428aa
/////////////////////////////////////////////////////////////////////////////////////////////

const crcTable = [0x0000, 0xcc01, 0xd801, 0x1400, 0xf001, 0x3c00, 0x2800, 0xe401, 0xa001, 0x6c00, 0x7800, 0xb401, 0x5000, 0x9c01, 0x8801, 0x4400]

class CrcCalculator {
    #crc = 0

    constructor() {}

    get crc() {
        return this.#crc
    }

    #updateCRC(value) {
        // compute checksum of lower four bits of byte
        let tmp = crcTable[this.#crc & 0xf]
        this.#crc = (this.#crc >> 4) & 0x0fff
        this.#crc = this.#crc ^ tmp ^ crcTable[value & 0xf]

        // compute checksum of upper four bits of byte
        tmp = crcTable[this.#crc & 0xf]
        this.#crc = (this.#crc >> 4) & 0x0fff
        this.#crc = this.#crc ^ tmp ^ crcTable[(value >> 4) & 0xf]

        return this.#crc
    }

    addBytes(buf, start, end) {
        for (let i = start; i < end; i++) {
            this.#crc = this.#updateCRC(buf[i])
        }

        return this.#crc
    }

    static calculateCRC(buf, start, end) {
        const crcCalculator = new CrcCalculator()
        return crcCalculator.addBytes(buf, start, end)
    }
}

export default CrcCalculator
